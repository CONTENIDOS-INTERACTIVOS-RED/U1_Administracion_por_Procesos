{"remainingRequest":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/src/views/curso/Tema3.vue?vue&type=template&id=58bad1c0&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/src/views/curso/Tema3.vue","mtime":1739757667900},{"path":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Administracion_por_Procesos/U1_Administracion_por_Procesos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}